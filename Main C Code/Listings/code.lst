C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CODE
OBJECT MODULE PLACED IN .\Objects\code.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\code
                    -.lst) TABS(2) OBJECT(.\Objects\code.obj)

line level    source

   1          #include <reg51.h>
   2          #include <reg51.h>
   3          
   4          // Define port connections for keypad and 7-segment display
   5          sbit ROW1 = P1^0;
   6          sbit ROW2 = P1^1;
   7          sbit ROW3 = P1^2;
   8          sbit ROW4 = P1^3;
   9          sbit COL1 = P1^4;
  10          sbit COL2 = P1^5;
  11          sbit COL3 = P1^6;
  12          sbit SegEn1 = P0^0;
  13          sbit SegEn2 = P0^1;
  14          sbit SegEn3 = P0^2;
  15          sbit SegEn4 = P0^3;
  16          sbit FREQ = P3^7;
  17          sbit EXT_SW = P3^2;
  18          
  19          //Signals of selecting the 7-segment
  20          #define SegOne   0xf1
  21          #define SegTwo   0xf2
  22          #define SegThree 0xf4
  23          #define SegFour  0xf8
  24          
  25          //Defines needed
  26          int R0,R1,R2,R3,R4,R5,R6,R7;
  27          int temp,overflow_counter,overflow,state=0;
  28          float needturns;
  29          unsigned char th,tl;
  30          
  31          // Define 7-segment display patterns for each key
  32          unsigned char patterns[10] =
  33          {
  34              0xF9,
  35              0xA4,
  36              0xB0,
  37              0x99,
  38              0x92,
  39              0x82,
  40              0xF8,
  41              0x80,
  42              0x90,
  43              0xC0,
  44          };
  45          
  46          // Define keypad array
  47          unsigned char keypad[4][3] =
  48          {
  49              {1, 2, 3},
  50              {4, 5, 6},
  51              {7, 8, 9},
  52              {0, 0, 0}
  53          };
  54          
C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 2   

  55          
  56          //Delay Function
  57          void Delay()
  58          {
  59   1          //0.28s delay timer for the refreshing
  60   1          TMOD=0x02;
  61   1          TH0=0xFF;
  62   1          TL0=0X00;
  63   1          TR0=1;
  64   1          while (TF0==0);
  65   1          TR0=0;
  66   1          TF0=0;
  67   1      }
  68          
  69          //7-segment Refreshing Function
  70          void refresh()
  71          {
  72   1          P0 = SegFour;
  73   1          P2 = patterns[R0];    // Display key value on 7-segment display
  74   1          Delay();
  75   1      
  76   1          P0 = SegThree;
  77   1          P2 = patterns[R1];    // Display key value on 7-segment display
  78   1          Delay();
  79   1      
  80   1          P0 = SegTwo;
  81   1          P2 = patterns[R2];    // Display key value on 7-segment display
  82   1          Delay();
  83   1      
  84   1          P0 = SegOne;
  85   1          P2 = patterns[R3];    // Display key value on 7-segment display
  86   1          Delay();
  87   1      }
  88          
  89          //For delaying the by n*0.28s
  90          void DelayNth(int n)
  91          {
  92   1          int i=0;
  93   1          for(i=0; i<n; i++)
  94   1          {
  95   2              Delay();
  96   2          }
  97   1      }
  98          
  99          //puting the number to the reg. to select its pattern
 100          void Key_put(int num,int key)
 101          {
 102   1          P0 = 0x8F;
 103   1          R3=R2;
 104   1          R7=R6;
 105   1          DelayNth(250);
 106   1          R2=R1;
 107   1          R6=R5;
 108   1          DelayNth(250);
 109   1          R1=R0;
 110   1          R5=R4;
 111   1          DelayNth(250);
 112   1          R0=num;
 113   1          R4=key;
 114   1      }
 115          
 116          //Function for detecting the pressed key
C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 3   

 117          void key_detect()
 118          {
 119   1          unsigned char row, col, key, num;
 120   1          while (1)
 121   1          {
 122   2              // Check row 1
 123   2              ROW4 = 1;
 124   2              ROW3 = 1;
 125   2              ROW2 = 1;
 126   2              ROW1 = 0;
 127   2              if (COL1 == 0)   // Check column 1
 128   2              {
 129   3                  row = 0;
 130   3                  col = 0;
 131   3                  num = 0;
 132   3                  break;
 133   3              }
 134   2              else if (COL2 == 0)   // Check column 2
 135   2              {
 136   3                  row = 0;
 137   3                  col = 1;
 138   3                  num = 1;
 139   3                  break;
 140   3              }
 141   2              else if (COL3 == 0)   // Check column 3
 142   2              {
 143   3                  row = 0;
 144   3                  col = 2;
 145   3                  num = 2;
 146   3                  break;
 147   3              }
 148   2      
 149   2              // Check row 2
 150   2              ROW4 = 1;
 151   2              ROW3 = 1;
 152   2              ROW1 = 1;
 153   2              ROW2 = 0;
 154   2              if (COL1 == 0)   // Check column 1
 155   2              {
 156   3                  row = 1;
 157   3                  col = 0;
 158   3                  num = 3;
 159   3                  break;
 160   3              }
 161   2              else if (COL2 == 0)   // Check column 2
 162   2              {
 163   3                  row = 1;
 164   3                  col = 1;
 165   3                  num = 4;
 166   3                  break;
 167   3              }
 168   2              else if (COL3 == 0)   // Check column 3
 169   2              {
 170   3                  row = 1;
 171   3                  col = 2;
 172   3                  num = 5;
 173   3                  break;
 174   3              }
 175   2      
 176   2              // Check row 3
 177   2              ROW4 = 1;
 178   2              ROW2 = 1;
C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 4   

 179   2              ROW1 = 1;
 180   2              ROW3 = 0;
 181   2              if (COL1 == 0)   // Check column 1
 182   2              {
 183   3                  row = 2;
 184   3                  col = 0;
 185   3                  num = 6;
 186   3                  break;
 187   3              }
 188   2              else if (COL2 == 0)   // Check column 2
 189   2              {
 190   3                  row = 2;
 191   3                  col = 1;
 192   3                  num = 7;
 193   3                  break;
 194   3              }
 195   2              else if (COL3 == 0)   // Check column 3
 196   2              {
 197   3                  row = 2;
 198   3                  col = 2;
 199   3                  num = 8;
 200   3                  break;
 201   3              }
 202   2      
 203   2              // Check row 4
 204   2              ROW4 = 0;
 205   2              ROW3 = 1;
 206   2              ROW2 = 1;
 207   2              ROW1 = 1;
 208   2              if (COL1 == 0)   // Check column 1
 209   2              {
 210   3                  row = 3;
 211   3                  col = 0;
 212   3                  num = 9;
 213   3                  break;
 214   3              }
 215   2              else if (COL2 == 0)   // Check column 2
 216   2              {
 217   3                  row = 3;
 218   3                  col = 1;
 219   3                  num = 9;
 220   3                  break;
 221   3              }
 222   2              else if (COL3 == 0)   // Check column 3
 223   2              {
 224   3                  row = 3;
 225   3                  col = 2;
 226   3                  num = 9;
 227   3                  break;
 228   3              }
 229   2      
 230   2              ROW1 = ROW2 = ROW3 = ROW4 = 1; // Set all rows high
 231   2              refresh();
 232   2          }
 233   1          key = keypad[row][col]; // Get key value from keypad array
 234   1          P0 = 0x0F;
 235   1          Key_put(num,key);
 236   1      }
 237          
 238          //Function to calculate the value of TH1,TL1
 239          void cal_overflow()
 240          {
C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 5   

 241   1          int value = (R4+R5*10+R6*100+R7*1000)/3+50;
 242   1          float time = (1.0/value*1.0)/2.0;
 243   1          float needturns = time/(1.085/1000000);
 244   1          if(needturns >= 65535)
 245   1          {
 246   2              overflow = 1;
 247   2              while(needturns >= 65535)
 248   2              {
 249   3                  overflow*=2;
 250   3                  needturns /=2;
 251   3              }
 252   2              temp=(int)65536-needturns;
 253   2              th = (unsigned char)((temp>>8)&0xFF);
 254   2              tl = (unsigned char)(temp&0x00FF);
 255   2          }
 256   1          else
 257   1          {
 258   2              overflow = 0;
 259   2              temp=(int)65536-needturns;
 260   2              th = (unsigned char)((temp>>8)&0xFF);
 261   2              tl = (unsigned char)(temp&0x00FF);
 262   2          }
 263   1      }
 264          
 265          //Timer that take Delay of 0.05msec
 266          void Generate (void) interrupt 3
 267          {
 268   1          // timer 1 overflow
 269   1          TL1 = tl;
 270   1          TH1 = th;
 271   1          if(overflow_counter == 0)
 272   1          {
 273   2              FREQ =~ FREQ;
 274   2              TR1 = 0;
 275   2              overflow_counter = overflow;
 276   2              TL1 = tl;
 277   2              TH1 = th;
 278   2              TR1 = 1;
 279   2          }
 280   1          else
 281   1              overflow_counter--;
 282   1      }
 283          
 284          
 285          void debounce()
 286          {
 287   1          unsigned char i = 0;
 288   1          while(  EXT_SW == 0 );    
 289   1          for( i = 255; i > 0; i--)
 290   1            if ( EXT_SW == 0 )
 291   1                i = 255;  
 292   1      }
 293          
 294          //Interrupt Functions
 295          void EXT_INT0 (void) interrupt 0
 296          {
 297   1        debounce();
 298   1        if(state==0){
 299   2          cal_overflow();
 300   2          overflow_counter= overflow;
 301   2          TL1 = tl;
 302   2          TH1 = th;
C51 COMPILER V9.60.7.0   CODE                                                              04/26/2023 18:14:02 PAGE 6   

 303   2          TR1 = 1;
 304   2          FREQ = 0;
 305   2          state=1;
 306   2        }else{
 307   2          TR1=0;
 308   2          TF1=0;
 309   2          state=0;
 310   2          R0=R1=R2=R3=9;
 311   2          R4=R5=R6=R7=0;
 312   2        }
 313   1      }
 314          
 315          
 316          void main()
 317          {
 318   1          TMOD =  (TMOD & 0xF3) | 0x10;     // timer 1 in mode 1 (16 bit counter)
 319   1          ET1 = 1;
 320   1          EX0 = 1     ; // enable EXT interrupt 0
 321   1          IT1 = 1     ; // activates on falling edge from 1 to 0
 322   1          EA  = 1     ; //enable global interrupts
 323   1          state=0;
 324   1          R0=R1=R2=R3=9;
 325   1          while(1)
 326   1          {
 327   2              key_detect();
 328   2          }
 329   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    892    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     52       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
